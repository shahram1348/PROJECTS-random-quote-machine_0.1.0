{"version":3,"sources":["../../random-quote-machine/src/components/QuoteMachine.js","../../random-quote-machine/src/App.js","../../random-quote-machine/src/reportWebVitals.js","../../random-quote-machine/src/index.js"],"names":["QuoteMachine","_ref","assignNewQuoteIndex","selectedQuote","React","createElement","Card","id","CardContent","Typography","quote","author","CardActions","Button","size","onClick","IconButton","href","concat","target","FontAwesomeIcon","icon","faTwitter","withStyles","container","display","height","alignItems","justifyContent","Component","constructor","props","super","this","state","quotes","selectedQuotesIndex","selectQuotesIndex","bind","componentDidMount","fetch","then","datat","json","setState","length","Math","floor","random","Number","isInteger","render","console","log","Grid","className","classes","xs","lg","item","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","App"],"mappings":"sQAkCeA,MAvBMC,IAAA,IAACC,oBAAEA,EAAmBC,cAAEA,GAAeF,EAAA,OACxDG,IAAAC,cAACC,IAAI,CAACC,GAAG,aACLH,IAAAC,cAACG,IAAW,CAACD,GAAG,aAEZH,IAAAC,cAACI,IAAU,CAACF,GAAG,QAAO,IAChBJ,EAAcO,MAAM,OAAIN,IAAAC,cAAA,QAAME,GAAG,UAAUJ,EAAcQ,UAIpEP,IAAAC,cAACO,IAAW,KACZR,IAAAC,cAACQ,IAAM,CAACN,GAAG,YAAYO,KAAK,QAAQC,QAASb,GAAsB,cAClEE,IAAAC,cAACW,IAAU,CACXT,GAAG,cACHU,KAAI,yCAAAC,OAA2Cf,EAAcO,MAAK,yBAClES,OAAO,UACHf,IAAAC,cAACe,IAAe,CAACC,KAAMC,YAAWR,KAAK,kCC4CpCS,kBA/DA,CACbC,UAAW,CACTC,QAAS,OACTC,OAAQ,QACRC,WAAY,SACZC,eAAgB,WA0DLL,CAvDf,cAAkBM,YAClBC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,MAAQ,CACXC,OAAQ,GACRC,oBAAqB,MAEvBH,KAAKI,kBAAoBJ,KAAKI,kBAAkBC,KAAKL,MACrDA,KAAK/B,oBAAsB+B,KAAK/B,oBAAoBoC,KAAKL,MAG3DM,oBACEC,MAAM,yIACLC,KAAKC,GAASA,EAAMC,QACpBF,KAAKN,GAAUF,KAAKW,SAAU,CAAET,UAAUF,KAAK/B,sBAGjDmC,oBACC,GAAKJ,KAAKC,MAAMC,OAAOU,OAGvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAUf,KAAKC,MAAMC,OAAOU,QAGrD3C,sBACG+B,KAAKW,SAAU,CAAER,oBAAqBH,KAAKI,sBAG7ClC,oBACC,GAAK8B,KAAKC,MAAMC,OAAOU,QAAWI,OAAOC,UAAUjB,KAAKC,MAAME,qBAG9D,OAAOH,KAAKC,MAAMC,OAAOF,KAAKC,MAAME,qBAGtCe,SAEA,OADEC,QAAQC,IAAIpB,KAAKC,MAAME,qBAErBhC,IAAAC,cAACiD,IAAI,CAACC,UAAWtB,KAAKF,MAAMyB,QAAQhC,UAAYA,WAAS,GACvDpB,IAAAC,cAACiD,IAAI,CAACG,GAAI,GAAIC,GAAI,EAAIC,MAAI,GAEtB1B,KAAK9B,cACLC,IAAAC,cAACL,EAAY,CAACG,cAAe8B,KAAK9B,cAAeD,oBAAqB+B,KAAK/B,sBAC3E,UC/CK0D,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAvB,KAAAsB,EAAAzB,KAAA,UAAqBG,KAAKxC,IAAiD,IAAhDgE,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASpE,EACpEgE,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDtB,OACH/C,IAAAC,cAACD,IAAMsE,WAAU,KACftE,IAAAC,cAACsE,EAAG,QAORf","file":"static/js/main.220e2495.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons/faTwitter\";\r\n\r\n \r\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\r\n    <Card id=\"quote-box\">\r\n        <CardContent id=\"quote-box\">\r\n            \r\n            <Typography id=\"text\">\r\n                \"{selectedQuote.quote}\" - <span id=\"author\">{selectedQuote.author}</span>\r\n            </Typography>  \r\n       \r\n       </CardContent>\r\n       <CardActions>\r\n       <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex} >Next Quote</Button>\r\n        <IconButton\r\n        id=\"tweet-quote\"\r\n        href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=SMotaghiani`} \r\n        target=\"_blank\">\r\n            <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\r\n        </IconButton>\r\n       </CardActions>\r\n    \r\n       \r\n    </Card>\r\n);\r\n\r\nexport default QuoteMachine;","// Thanks to Arian Jabbari\nimport React, { Component } from 'react';\nimport QuoteMachine from './components/QuoteMachine';\nimport \"typeface-roboto\";\nimport Grid  from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  container: {\n    display: \"flex\",\n    height: \"100vh\",\n    alignItems: \"center\",\n    justifyContent: 'center'\n  }\n}\nclass App extends Component {\nconstructor(props) {\n  super(props);\n  // Initialize state\n  this.state = {\n    quotes: [],\n    selectedQuotesIndex: null,\n  }\n  this.selectQuotesIndex = this.selectQuotesIndex.bind(this); // it must be done for every method in react. Although there is another way to do this (ES7)\n  this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this)\n}\n// Best life cycle method that react has to fetch data is componentDidMount()\ncomponentDidMount() {\n  fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n  .then(datat => datat.json())\n  .then(quotes => this.setState( { quotes }, this.assignNewQuoteIndex ))  // set quotes state. Use call back function  syncronous \n}\n\n selectQuotesIndex() {\n  if (!this.state.quotes.length) {\n    return undefined;\n  }\n  return Math.floor(Math.random()* this.state.quotes.length );\n }\n\nassignNewQuoteIndex() {\n   this.setState( { selectedQuotesIndex: this.selectQuotesIndex() });\n}\n // ES6 get  \n get selectedQuote() {\n  if (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuotesIndex)) {\n    return undefined;\n  }\n  return this.state.quotes[this.state.selectedQuotesIndex];\n }\n\nrender() {\n  console.log(this.state.selectedQuotesIndex)\nreturn (\n    <Grid className={this.props.classes.container}  container  >\n      <Grid xs={11} lg={8}  item   >\n        {\n          this.selectedQuote ?\n          <QuoteMachine selectedQuote={this.selectedQuote} assignNewQuoteIndex={this.assignNewQuoteIndex}  /> : \n          null\n        }\n        \n      </Grid>\n    </Grid>\n  );\n}\n}\n\n\n\nexport default withStyles(styles)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}